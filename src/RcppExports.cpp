// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// vector_join
std::string vector_join(const std::vector<std::string>& v, const std::string& token);
RcppExport SEXP mango_vector_join(SEXP vSEXP, SEXP tokenSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<std::string>& >::type v(vSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type token(tokenSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_join(v, token));
    return rcpp_result_gen;
END_RCPP
}
// string_split
std::vector<std::string> string_split(const std::string& s, const std::string& delimiter);
RcppExport SEXP mango_string_split(SEXP sSEXP, SEXP delimiterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string& >::type s(sSEXP);
    Rcpp::traits::input_parameter< const std::string& >::type delimiter(delimiterSEXP);
    rcpp_result_gen = Rcpp::wrap(string_split(s, delimiter));
    return rcpp_result_gen;
END_RCPP
}
// parseFastq
std::vector< int > parseFastq(std::string fastq1, std::string fastq2, std::string basename, int minlength, int maxlength, bool keepempty, bool verbose, std::string linker1, std::string linker2, int numberlinkers);
RcppExport SEXP mango_parseFastq(SEXP fastq1SEXP, SEXP fastq2SEXP, SEXP basenameSEXP, SEXP minlengthSEXP, SEXP maxlengthSEXP, SEXP keepemptySEXP, SEXP verboseSEXP, SEXP linker1SEXP, SEXP linker2SEXP, SEXP numberlinkersSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type fastq1(fastq1SEXP);
    Rcpp::traits::input_parameter< std::string >::type fastq2(fastq2SEXP);
    Rcpp::traits::input_parameter< std::string >::type basename(basenameSEXP);
    Rcpp::traits::input_parameter< int >::type minlength(minlengthSEXP);
    Rcpp::traits::input_parameter< int >::type maxlength(maxlengthSEXP);
    Rcpp::traits::input_parameter< bool >::type keepempty(keepemptySEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< std::string >::type linker1(linker1SEXP);
    Rcpp::traits::input_parameter< std::string >::type linker2(linker2SEXP);
    Rcpp::traits::input_parameter< int >::type numberlinkers(numberlinkersSEXP);
    rcpp_result_gen = Rcpp::wrap(parseFastq(fastq1, fastq2, basename, minlength, maxlength, keepempty, verbose, linker1, linker2, numberlinkers));
    return rcpp_result_gen;
END_RCPP
}
// buildBedpe
void buildBedpe(std::string sam1, std::string sam2, std::string bedpefile);
RcppExport SEXP mango_buildBedpe(SEXP sam1SEXP, SEXP sam2SEXP, SEXP bedpefileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type sam1(sam1SEXP);
    Rcpp::traits::input_parameter< std::string >::type sam2(sam2SEXP);
    Rcpp::traits::input_parameter< std::string >::type bedpefile(bedpefileSEXP);
    buildBedpe(sam1, sam2, bedpefile);
    return R_NilValue;
END_RCPP
}
// findPairs
void findPairs(std::string overlapfile, std::string petpairsfile, std::string interactionfile, std::string peakscount, std::string peaksfileslopdepth);
RcppExport SEXP mango_findPairs(SEXP overlapfileSEXP, SEXP petpairsfileSEXP, SEXP interactionfileSEXP, SEXP peakscountSEXP, SEXP peaksfileslopdepthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type overlapfile(overlapfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type petpairsfile(petpairsfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type interactionfile(interactionfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type peakscount(peakscountSEXP);
    Rcpp::traits::input_parameter< std::string >::type peaksfileslopdepth(peaksfileslopdepthSEXP);
    findPairs(overlapfile, petpairsfile, interactionfile, peakscount, peaksfileslopdepth);
    return R_NilValue;
END_RCPP
}
// splitBedbyChrom
std::vector<std::string> splitBedbyChrom(std::string bedfile, std::string outnamebase);
RcppExport SEXP mango_splitBedbyChrom(SEXP bedfileSEXP, SEXP outnamebaseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedfile(bedfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outnamebase(outnamebaseSEXP);
    rcpp_result_gen = Rcpp::wrap(splitBedbyChrom(bedfile, outnamebase));
    return rcpp_result_gen;
END_RCPP
}
// makeDistanceFile
void makeDistanceFile(std::string bedpefilesortrmdup, std::string distancefile, int mindist, int maxdist);
RcppExport SEXP mango_makeDistanceFile(SEXP bedpefilesortrmdupSEXP, SEXP distancefileSEXP, SEXP mindistSEXP, SEXP maxdistSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedpefilesortrmdup(bedpefilesortrmdupSEXP);
    Rcpp::traits::input_parameter< std::string >::type distancefile(distancefileSEXP);
    Rcpp::traits::input_parameter< int >::type mindist(mindistSEXP);
    Rcpp::traits::input_parameter< int >::type maxdist(maxdistSEXP);
    makeDistanceFile(bedpefilesortrmdup, distancefile, mindist, maxdist);
    return R_NilValue;
END_RCPP
}
// joinchromfiles
void joinchromfiles(std::vector<std::string> sortedchromfiles, std::string bedpefilesort);
RcppExport SEXP mango_joinchromfiles(SEXP sortedchromfilesSEXP, SEXP bedpefilesortSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<std::string> >::type sortedchromfiles(sortedchromfilesSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedpefilesort(bedpefilesortSEXP);
    joinchromfiles(sortedchromfiles, bedpefilesort);
    return R_NilValue;
END_RCPP
}
// DeterminePeakDepthsC
void DeterminePeakDepthsC(std::string temppeakoverlap, std::string peaksfileslopdepth);
RcppExport SEXP mango_DeterminePeakDepthsC(SEXP temppeakoverlapSEXP, SEXP peaksfileslopdepthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type temppeakoverlap(temppeakoverlapSEXP);
    Rcpp::traits::input_parameter< std::string >::type peaksfileslopdepth(peaksfileslopdepthSEXP);
    DeterminePeakDepthsC(temppeakoverlap, peaksfileslopdepth);
    return R_NilValue;
END_RCPP
}
// removeDups
std::vector< std::string > removeDups(std::string bedpein, std::string outnamebase, double distancesplit);
RcppExport SEXP mango_removeDups(SEXP bedpeinSEXP, SEXP outnamebaseSEXP, SEXP distancesplitSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedpein(bedpeinSEXP);
    Rcpp::traits::input_parameter< std::string >::type outnamebase(outnamebaseSEXP);
    Rcpp::traits::input_parameter< double >::type distancesplit(distancesplitSEXP);
    rcpp_result_gen = Rcpp::wrap(removeDups(bedpein, outnamebase, distancesplit));
    return rcpp_result_gen;
END_RCPP
}
// splitBedpe
std::vector<std::string> splitBedpe(std::string bedpein, std::string outnamebase, bool printreads, bool printpets, bool skipstars, bool skipinter);
RcppExport SEXP mango_splitBedpe(SEXP bedpeinSEXP, SEXP outnamebaseSEXP, SEXP printreadsSEXP, SEXP printpetsSEXP, SEXP skipstarsSEXP, SEXP skipinterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedpein(bedpeinSEXP);
    Rcpp::traits::input_parameter< std::string >::type outnamebase(outnamebaseSEXP);
    Rcpp::traits::input_parameter< bool >::type printreads(printreadsSEXP);
    Rcpp::traits::input_parameter< bool >::type printpets(printpetsSEXP);
    Rcpp::traits::input_parameter< bool >::type skipstars(skipstarsSEXP);
    Rcpp::traits::input_parameter< bool >::type skipinter(skipinterSEXP);
    rcpp_result_gen = Rcpp::wrap(splitBedpe(bedpein, outnamebase, printreads, printpets, skipstars, skipinter));
    return rcpp_result_gen;
END_RCPP
}
// buildTagAlign
void buildTagAlign(std::string bedpefile, std::string TagAlignfile);
RcppExport SEXP mango_buildTagAlign(SEXP bedpefileSEXP, SEXP TagAlignfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type bedpefile(bedpefileSEXP);
    Rcpp::traits::input_parameter< std::string >::type TagAlignfile(TagAlignfileSEXP);
    buildTagAlign(bedpefile, TagAlignfile);
    return R_NilValue;
END_RCPP
}
// buildBedpeHiC
void buildBedpeHiC(std::string validPairs, std::string bedpefile, std::string bedtoolsgenome, int readlength);
RcppExport SEXP mango_buildBedpeHiC(SEXP validPairsSEXP, SEXP bedpefileSEXP, SEXP bedtoolsgenomeSEXP, SEXP readlengthSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type validPairs(validPairsSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedpefile(bedpefileSEXP);
    Rcpp::traits::input_parameter< std::string >::type bedtoolsgenome(bedtoolsgenomeSEXP);
    Rcpp::traits::input_parameter< int >::type readlength(readlengthSEXP);
    buildBedpeHiC(validPairs, bedpefile, bedtoolsgenome, readlength);
    return R_NilValue;
END_RCPP
}
// external_sort
void external_sort(std::string inputfile, std::string outputfile);
RcppExport SEXP mango_external_sort(SEXP inputfileSEXP, SEXP outputfileSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type inputfile(inputfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type outputfile(outputfileSEXP);
    external_sort(inputfile, outputfile);
    return R_NilValue;
END_RCPP
}
// everyotherline
void everyotherline(std::string overlapin, std::string overlapout);
RcppExport SEXP mango_everyotherline(SEXP overlapinSEXP, SEXP overlapoutSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type overlapin(overlapinSEXP);
    Rcpp::traits::input_parameter< std::string >::type overlapout(overlapoutSEXP);
    everyotherline(overlapin, overlapout);
    return R_NilValue;
END_RCPP
}
// AddQvals
void AddQvals(std::string interactionfile, std::string interactionfilefinal, std::vector<double> Q, double maxPval);
RcppExport SEXP mango_AddQvals(SEXP interactionfileSEXP, SEXP interactionfilefinalSEXP, SEXP QSEXP, SEXP maxPvalSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type interactionfile(interactionfileSEXP);
    Rcpp::traits::input_parameter< std::string >::type interactionfilefinal(interactionfilefinalSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< double >::type maxPval(maxPvalSEXP);
    AddQvals(interactionfile, interactionfilefinal, Q, maxPval);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"mango_vector_join", (DL_FUNC) &mango_vector_join, 2},
    {"mango_string_split", (DL_FUNC) &mango_string_split, 2},
    {"mango_parseFastq", (DL_FUNC) &mango_parseFastq, 10},
    {"mango_buildBedpe", (DL_FUNC) &mango_buildBedpe, 3},
    {"mango_findPairs", (DL_FUNC) &mango_findPairs, 5},
    {"mango_splitBedbyChrom", (DL_FUNC) &mango_splitBedbyChrom, 2},
    {"mango_makeDistanceFile", (DL_FUNC) &mango_makeDistanceFile, 4},
    {"mango_joinchromfiles", (DL_FUNC) &mango_joinchromfiles, 2},
    {"mango_DeterminePeakDepthsC", (DL_FUNC) &mango_DeterminePeakDepthsC, 2},
    {"mango_removeDups", (DL_FUNC) &mango_removeDups, 3},
    {"mango_splitBedpe", (DL_FUNC) &mango_splitBedpe, 6},
    {"mango_buildTagAlign", (DL_FUNC) &mango_buildTagAlign, 2},
    {"mango_buildBedpeHiC", (DL_FUNC) &mango_buildBedpeHiC, 4},
    {"mango_external_sort", (DL_FUNC) &mango_external_sort, 2},
    {"mango_everyotherline", (DL_FUNC) &mango_everyotherline, 2},
    {"mango_AddQvals", (DL_FUNC) &mango_AddQvals, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mango(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
